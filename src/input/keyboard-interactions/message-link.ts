import KeyboardInteractionInterface from "@/lib/interfaces/command-interaction-interface";
import Client from "@/lib/client/client";
import { Context, Markup } from "telegraf";

export default {
    isDisabled: false,
    async callback(ctx: Context, client: Client): Promise<void> {
        await ctx.telegram.sendChatAction(ctx.chat!.id, "typing")
        let user = await client.db?.user.findUnique({
            where: {
                id: ctx.from!.id
            },
            include: {
                groups: true
            }
        })
        if (!user) user =  await client.db?.user.create({
            data: {
                id: ctx.from!.id
            },
            include: {
                groups: true
            }
        })
        if (!user?.groups || user?.groups.length === 0) await ctx.reply("–û–π üòß \n–ü–æ—Ö–æ–∂–µ —É –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø.\n–î–æ–±–∞–≤—å—Ç–µ –µ—ë –ø–æ –Ω–∞–∂–∞—Ç–∏—é –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µüòä",
            Markup.inlineKeyboard([[{text: "–î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É", callback_data: "add-group"}]]))
        else {
            let keyboard = []
            for (let group of user.groups) {
                keyboard.push([{text: group.title, callback_data: `pick-group|${group.id}`}])
            }
            keyboard.push([{text: "–î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É", callback_data: "add-group"}])
            await ctx.reply("–í—ã–±–µ—Ä–∏ –≥—Ä—É–ø–ø—É –≤ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π-—Å—Å—ã–ª–∫–æ–π", {
                reply_markup: {
                    inline_keyboard: keyboard
                }
            })
        }
    }
} as KeyboardInteractionInterface