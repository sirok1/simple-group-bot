import Client from "@/lib/client/client";
import { message } from "telegraf/filters";

export default function (client:Client) {
    client.bot?.on(message("text"), async ctx => {
        const cacheData = client.userCache.get(`${ctx.from.id}`)
        if(cacheData && cacheData.label == "sending message"){
            client.userCache.add(`${ctx.from.id}`, Object.assign({}, cacheData, {message: ctx.update.message, label: "sending link"}))
            await ctx.reply("–û—Ç–ª–∏—á–Ω–æ, –∑–∞–ø–∏—Å–∞–ª üìù\n\n –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –∫–æ—Ç–æ—Ä—É—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∫ —Å–æ–æ–±—â–µ–Ω–∏—é")
        }
        else if(cacheData && cacheData.label === "sending link"){
            if (!ctx.message.text.startsWith("https://")) return await ctx.reply("–°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å https:// ü§ì")
            client.userCache.add(`${ctx.from.id}`, Object.assign({}, cacheData, {link: ctx.message.text, label: "sending link name"}))
            await ctx.reply("–•–æ—Ä–æ—à–æ. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏-—Å—Å—ã–ª–∫–∏")
        }
        else if(cacheData && cacheData.label === "sending link name"){
            if (ctx.message.text.length > 30) return await ctx.reply("–¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ—Ä–æ—á–µ")
            await ctx.reply("–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª...")
            await ctx.telegram.sendChatAction(ctx.chat.id, "typing")
            await ctx.telegram.sendMessage(Number(cacheData.groupId), `${cacheData.message.text}`, {
                reply_markup: {
                    inline_keyboard: [[{text: ctx.message.text, url: cacheData.link}]]
                },
                parse_mode: "Markdown"
            })
            await ctx.reply("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ü•≥", {
                reply_markup: {
                    inline_keyboard: [[{text: "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–æ–π", callback_data: "message-link"}]]
                }
            })
            // if (cacheData.message.photo) {
            //     await ctx.telegram.sendMediaGroup(Number(cacheData.groupId), [Object.assign({}, cacheData.message.photo.shift, {caption: cacheData.message.caption}), ...cacheData.message.photo], {
            //
            //     })
            // }

        }
    })

    // client.bot?.on(message("caption"), async ctx => {
    //     const cacheData = client.userCache.get(`${ctx.from.id}`)
    //     if(cacheData && cacheData.label == "sending message"){
    //         client.userCache.add(`${ctx.from.id}`, Object.assign({}, cacheData, {message: ctx.update.message, label: "sending link"}))
    //         await ctx.reply("–û—Ç–ª–∏—á–Ω–æ, –∑–∞–ø–∏—Å–∞–ª üìù\n\n –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –∫–æ—Ç–æ—Ä—É—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∫ —Å–æ–æ–±—â–µ–Ω–∏—é")
    //     }
    // })
}